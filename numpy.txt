import numpy as np

Numphy Array ->more efficient than lists
	special type of list, organize multiple items (strings, numbers, even other arrays)
ex: my_array = np.array([1, 2, 3, 4, 5])


List to numpy array -> np.array()
ex: my_list = [1, 2, 3, 4]
    my_array = np.array(my_list)


Operations with NumPy Arrays
Letâ€™s compare how to add a number to each value in a python list versus a NumPy array:
# With a list
l = [1, 2, 3, 4, 5]
l_plus_3 = []
for i in range(len(l)):
    l_plus_3.append(l[i] + 3)

# With an array
a = np.array(l)
a_plus_3 = a + 3


Two-Dimensional Arrays  (a list of list where each list has the same number of elements)
In Python, we can create lists that are made up of other lists. Similarly, in NumPy we can create an array of arrays. If the arrays that make up our bigger array are all the same size, then it has a special name: a two-dimensional array.


Selecting Elements from a 1-D Array
a = np.array([5, 2, 7, 0, 11])
>>> a[0]
5 


CSV (comma_separated values)
 files into array using the np.genfromtxt() function

sample.csv
34, 9, 12, 11, 7

ex:  csv_array =
     np.genfromtxt('sample.csv', 
     delimiter=',')

once imported, this CSV will create the array
array([34, 9, 12, 11, 7])



Logical operations with arrays:
We can then use logical operators to evaluate and select items based on certain criteria.

a[a > 5]
array([10, 9, 8, 9, 7])

a[(a > 5) | (a < 2)]
array([10, 9, 8, 9, 7])
We can also combine logical statements to further specify our criteria. To do so, we place each statement in parentheses and use boolean operators like & (and) and | (or).




Selecting elements from a 2-D array

a[row,column]   TRES IMPORTANT ORDRE

a = np.array([[32, 15, 6, 9, 14], 
              [12, 10, 5, 23, 1],
              [2, 16, 13, 40, 37]])

# selects the first column
>>> a[:,0]                   (: AU DEBUT POUR SELECTIONNER LA COLONNE)
array([32, 12,  2])

# selects the second row
>>> a[1,:]                    (A LA FIN POUR SELECTIONNER UNE LIGNE/ROW :)
array([12, 10,  5, 23,  1])

# selects the first three elements of the first row
>>> a[0,0:3]
array([32, 15,  6])



Review:

Arrays are a special type of list that allows us to store values in an organized manner.

An array can be created by either defining it directly using np.array() or by importing a CSV using np.genfromtxt('file.csv', delimiter=',').

An operation (such as addition) can be performed on every element in an array by simply performing it on the array itself.

Elements can be selected from arrays using their index and array locations, both of which start at 0.
Logical operations can be used to create new, more focused arrays out of larger arrays.
